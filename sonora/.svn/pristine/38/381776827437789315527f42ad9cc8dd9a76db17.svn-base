package br.edu.ifsc.sonora.util;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

public class Notificacao {

    private static Gson gson = new Gson();
    private static boolean res = false;

    public static void notificaIFTTT(String event, String key, Map<String, String> values) throws Exception {

        StringBuffer bf = new StringBuffer();
        for (Map.Entry entry : values.entrySet()) {
            bf.append(String.format("%s=%s", entry.getKey(), entry.getValue().toString().replaceAll(" ", "%20")));
            bf.append("&");
        }
        String query = bf.toString();
        if (query.endsWith("&")) {
            query = query.substring(0, query.length() - 1);
        }
        String url = String.format("https://maker.ifttt.com/trigger/%s/with/key/%s?%s", event, key, query);
        String res = get(url);
        System.out.println("Resposta: " + res);

    }

    public static String get(String url) throws Exception {
        System.out.println("Entrou no método: " + url);
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        //padrão opcional do get
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'GET' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();

        //print result
        return response.toString();
    }

    public static void notifica(String evento) {
        if (!res) {
            try {
                res = true;
                String url = "https://maker.ifttt.com/trigger/" + evento + "/with/key/od0sKEsOKK_URxrhfWlN73zo71HYNrZW_q_pIMwbuhI";

                System.out.println("Entrou no método");

                URL obj = new URL(url);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                //padrão opcional do get
                con.setRequestMethod("GET");

                con.setRequestProperty("User-Agent", "Mozilla/5.0");

                int responseCode = con.getResponseCode();
                System.out.println("\nSending 'GET' request to URL : " + url);
                System.out.println("Response Code : " + responseCode);

                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                //print result
                System.out.println(response.toString());
            } catch (MalformedURLException ex) {
                Logger.getLogger(Notificacao.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Notificacao.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Já avisado.");
        }
    }

    public static Map<String, String> getMapJson(String url) throws Exception {
        System.out.println("Conectando: " + url);
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        //padrão opcional do get
        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", "Mozilla/5.0");

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'GET' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);
        if (responseCode == 200) {

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            Type type = new TypeToken<Map<String, String>>() {
            }.getType();
            Map<String, String> resMap = gson.fromJson(response.toString(), type);
            return resMap;
        } else {
            throw new Exception("Erro: " + responseCode);
        }

    }

    public static void callUrl(String url) throws Exception {

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        //padrão opcional do get
        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", "Mozilla/5.0");

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'GET' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);
    }

    public static void main(String[] args) throws Exception {
        HashMap teste = new HashMap();
        teste.put("value1", "-15ºC");
        teste.put("value2", "TEste2");
        teste.put("value3", "TEste3");
        // notificaIFTTT("teste", "hSeZDnVE4nuiGOUnLVRcs", teste);
        //notificaIFTTT("MensagemDeAlerta", "bxaeKVeNdOMZs5tfgNFlpa", teste);
        //notificaIFTTT("connect_android", "oAcu7B7WbA5Gi_vwmNp4HICnZdr13hP41fv4SEU1Qul", teste);
        notificaIFTTT("connect_therm", "oAcu7B7WbA5Gi_vwmNp4HICnZdr13hP41fv4SEU1Qul", teste);
        notificaIFTTT("connect_therm", "hSeZDnVE4nuiGOUnLVRcs", teste);

    }

    public static void growl(String modulo, String mensagem) {
        FacesContext context = FacesContext.getCurrentInstance();

        context.addMessage(null, new FacesMessage("Sucesso", modulo + ": " + mensagem));
        org.primefaces.context.RequestContext.getCurrentInstance().update("growl");

    }

    public static void message(FacesMessage.Severity severity, String title, String msg) {
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(severity, title, msg));
        org.primefaces.context.RequestContext.getCurrentInstance().update("messages");
    }

}
