/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifsc.sonora.service;

import br.edu.ifsc.sonora.dao.UsuarioDAO;
import br.edu.ifsc.sonora.entidade.Usuario;
import br.edu.ifsc.sonora.util.Notificacao;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

/**
 *
 * @author aluno
 */
@Named
@ApplicationScoped
public class UsuarioController extends AbstractNoSQLController<Usuario, UsuarioDAO> {

    @Inject
    private UsuarioDAO dao;
    @Inject
    private ConfigurationController configurationController;

    private String email;

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public void saveAtual() throws Exception {
        super.saveUsuario();
    }

    @Override
    public void findAtual() {
        super.findAtual(); //To change body of generated methods, choose Tools | Templates.
    }

    @PostConstruct
    @Override
    public void init() {
        super.init();
    }

    @Override
    public UsuarioDAO getDao() {
        return dao;
    }

    @Override
    public List<Usuario> getAll() {
        return super.getAll();
    }

    @Override
    public Usuario newInstance() {
        return new Usuario();
    }

    @Override
    public String getModule() {
        return "Usuario";
    }

    public void consulta() {
        try {
            Map map = Notificacao.getMapJson(configurationController.getAtual().getIpUsuario() + "/usuario/tag/" + email);
            String res = (String) map.get("descricao");
            Notificacao.callUrl(configurationController.getAtual().getIpSonora() + "/talk/" + res);

        } catch (Exception ex) {
            Logger.getLogger(UsuarioController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * validações
     *
     * @param email
     * @return
     */
    public static boolean validarEmail(String email) {
        if ((email == null) || (email.trim().length() == 0)) {
            return false;
        }
        String emailPattern = "\\b(^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@([A-Za-z0-9-])+(\\.[A-Za-z0-9-]+)*((\\.[A-Za-z0-9]{2,})|(\\.[A-Za-z0-9]{2,}\\.[A-Za-z0-9]{2,}))$)\\b";
        Pattern pattern = Pattern.compile(emailPattern, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(email);

        return matcher.matches();
    }

    public void showSuccessMessage(String Message) {
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, Message, null));
    }

    public void showErrorMessage(String Message) {
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, Message, null));
    }

    public void verificarSenha() {
        if (getAtual().getSenha().equals(getAtual().getSenhaVericacao())) {
            showSuccessMessage("Senha iguais");
        } else {
            showErrorMessage("Senhas não correspondem");
        }
    }
}
